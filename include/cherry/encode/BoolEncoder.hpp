#ifndef _CHERRY_ENCODE_BOOL_ENCODER_HPP_INCLUDED_
#define _CHERRY_ENCODE_BOOL_ENCODER_HPP_INCLUDED_

#include <stdint.h>
#include <cherry/vp8/types.hpp>
#include <cherry/except/BufferOverflow.hpp>

namespace cherry {

class BoolEncoder {
public:
	BoolEncoder(void* output, size_t size) : shift(24) {
		stream.buffer = (unsigned char*)output;
		stream.cursor = stream.buffer;
		stream.size = size;
		interval.bottom = 0;
		interval.length = 255;
	}

	void flush();

	size_t getOutputSize() const {
		return stream.cursor - stream.buffer;
	}

	void encode(const void* data, size_t size, Probability probability) {
		// The implementation is kind of tricky. Static data member
		// *functionTable* are all the 256 possible instances of function
		// template *addByte()*. *addByte()* is implemented as a function
		// template in the hope that the compiler will do substantial
		// inline, and apply constant folding optimization.
		const unsigned char* p = (const unsigned char*)data;
		for (size_t i = 0; i < size; ++i) {
			(functionTable[p[i]])(this, probability);
		};
	}

private:
	typedef void (*EncodingFunction)(BoolEncoder*, Probability);

	// The definition is generated by script "BoolEncoder_functionTable.py"
	static EncodingFunction functionTable[256];

	struct {
		unsigned char* buffer;
		unsigned char* cursor;
		size_t size;

		void append(uint8_t data) {
			if (cursor - buffer >= (ptrdiff_t)size) {
				RAISE(BufferOverflow, "Encoding buffer is full");
			}
			*cursor = data;
			++cursor;
		}
	} stream;
	struct {
		uint32_t bottom;
		uint32_t length;
	} interval;
	int shift;

	template<unsigned char BYTE>
	static void addByte(BoolEncoder* encoder, Probability probability) {
		for (int i = 7; i >= 0; --i) {
			encoder->addBool(BYTE & (1 << i), probability);
		}
	}

	void propagateCarry();

	void addBool(bool value, Probability probability) {
		uint32_t length = 1 + (interval.length - 1) * probability / 256;
		if (value) {
			interval.bottom += length;
			interval.length -= length;
		} else {
			interval.length = length;
		}

		while (interval.length < 128) {
			interval.length *= 2;
			if (interval.bottom & (1 << 31)) {
				propagateCarry();
			}
			interval.bottom *= 2;
			--shift;
			if (shift == 0) {
				stream.append(interval.bottom >> 24);
				interval.bottom &= (1 << 24) - 1;
				shift = 8;
			}
		}
	}
};

} // namespace cherry

#endif // _CHERRY_ENCODE_BOOL_ENCODER_HPP_INCLUDED_

